{"version":3,"sources":["yata.js"],"names":["https","require","fs","path","log","module","exports","config","defaultConfigPath","configPath","token","project","locales","format","root","outputPath","stripEmpty","apiHost","getConfigPath","validateConfig","Error","Array","isArray","length","normalizeLocale","locale","localeSegments","replace","split","newLocale","push","toLowerCase","toUpperCase","join","downloadTranslation","normalizedLocale","existsSync","mkdirSync","fileName","filePath","process","cwd","url","bufferFile","readFileSync","file","createWriteStream","Promise","resolve","reject","get","response","statusCode","pipe","on","newBufferFile","equals","e"],"mappings":"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","sourcesContent":["const https = require('https');\nconst fs = require('fs');\nconst path = require('path');\nconst log = require('./log');\n\nmodule.exports = {\n  config:            null,\n  defaultConfigPath: './yata.json',\n  configPath:        null,\n  token:             null,\n  project:           null,\n  locales:           [],\n  format:            'yml',\n  root:              false,\n  outputPath:        'translations',\n  stripEmpty:        false,\n  apiHost:           null,\n\n  getConfigPath(configPath) {\n    if (configPath) {\n      this.configPath = configPath;\n    } else {\n      this.configPath = this.defaultConfigPath;\n    }\n\n    return this.configPath;\n  },\n\n  validateConfig(token, project, locales, format, root, outputPath, stripEmpty) {\n    if (!token) {\n      throw new Error('No `token` in ENV');\n    } else {\n      this.token = token;\n    }\n\n    if (!project) {\n      throw new Error('No `project` in config file');\n    } else {\n      this.project = project;\n    }\n\n    if (!Array.isArray(locales) || locales.length === 0) {\n      throw new Error('No `locales` in config file');\n    } else {\n      this.locales = locales;\n    }\n\n    if (format && typeof format === 'string') {\n      this.format = format;\n    }\n\n    if (root && typeof root === 'boolean') {\n      this.root = root;\n    }\n\n    if (outputPath && typeof outputPath === 'string') {\n      this.outputPath = outputPath;\n    }\n\n    if (stripEmpty && typeof stripEmpty === 'boolean') {\n      this.stripEmpty = stripEmpty;\n    }\n\n    return true;\n  },\n\n  normalizeLocale(locale) {\n    if (!locale) { return; }\n\n    const localeSegments = locale.replace('-', '_').split('_');\n    let newLocale = [];\n    newLocale.push(localeSegments[0].toLowerCase());\n\n    // two segment locale\n    if (localeSegments[1]) {\n      newLocale.push(localeSegments[1].toUpperCase());\n    }\n\n    return newLocale.join('_');\n  },\n\n  downloadTranslation(locale) {\n    const normalizedLocale = this.normalizeLocale(locale);\n\n    if (!normalizedLocale) { throw new Error('No locale passed to download function'); }\n\n    // if output folder doesn't exist we create it\n    if (!fs.existsSync(this.outputPath)) {\n      fs.mkdirSync(this.outputPath);\n    }\n\n    const fileName = `${normalizedLocale}.${this.format}`;\n    const filePath = path.join(process.cwd(), `${this.outputPath}/${fileName}`);\n    const url = `${this.apiHost}/api/v1/project/${this.project}/${locale}/${this.format}?apiToken=${this.token}&root=${this.root}&strip_empty=${this.stripEmpty}`;\n\n    let bufferFile;\n\n    // if file exist we grab it's size\n    if (fs.existsSync(filePath)) {\n      bufferFile = fs.readFileSync(filePath);\n    }\n\n    // we start stream\n    const file = fs.createWriteStream(filePath);\n\n    return new Promise((resolve, reject) => {\n      https.get(url, response => {\n        const { statusCode } = response;\n\n        if (statusCode !== 200) {\n          return reject(`Request Failed.\\nStatus Code: ${statusCode}`);\n        }\n\n        response.pipe(file);\n        file.on('finish', () => {\n          const newBufferFile = fs.readFileSync(filePath);\n\n          if (bufferFile && bufferFile.equals(newBufferFile)) {\n            log('yellow', `Generating \"${locale}\" translation. Skipped.`);\n          } else {\n            log('green', `Generating \"${locale}\" translation. Done.`);\n          }\n          resolve();\n        });\n      }).on('error', e => {\n        log('red', e);\n      });\n    });\n  }\n};\n"],"file":"yata.js"}