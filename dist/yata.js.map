{"version":3,"sources":["yata.js"],"names":["http","require","fs","path","log","module","exports","config","defaultConfigPath","configPath","token","project","locales","format","root","outputPath","apiHost","getConfigPath","validateConfig","Error","Array","isArray","length","normalizeLocale","locale","localeSegments","replace","split","newLocale","push","toLowerCase","toUpperCase","join","downloadTranslation","normalizedLocale","existsSync","mkdirSync","fileName","filePath","process","cwd","url","bufferFile","readFileSync","file","createWriteStream","Promise","resolve","reject","get","response","statusCode","pipe","on","newBufferFile","equals","e"],"mappings":"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","file":"yata.js","sourcesContent":["const http = require('http');\nconst fs = require('fs');\nconst path = require('path');\nconst log = require('./log');\n\nmodule.exports = {\n  config:            null,\n  defaultConfigPath: './yata.json',\n  configPath:        null,\n  token:             null,\n  project:           null,\n  locales:           [],\n  format:            'yml',\n  root:              false,\n  outputPath:        'translations',\n  apiHost:           null,\n\n  getConfigPath(configPath) {\n    if (configPath) {\n      this.configPath = configPath;\n    } else {\n      this.configPath = this.defaultConfigPath;\n    }\n\n    return this.configPath;\n  },\n\n  validateConfig(token, project, locales, format, root, outputPath) {\n    if (!token) {\n      throw new Error('No `token` in ENV');\n    } else {\n      this.token = token;\n    }\n\n    if (!project) {\n      throw new Error('No `project` in config file');\n    } else {\n      this.project = project;\n    }\n\n    if (!Array.isArray(locales) || locales.length === 0) {\n      throw new Error('No `locales` in config file');\n    } else {\n      this.locales = locales;\n    }\n\n    if (format && typeof format === 'string') {\n      this.format = format;\n    }\n\n    if (root && typeof root === 'boolean') {\n      this.root = root;\n    }\n\n    if (outputPath && typeof outputPath === 'string') {\n      this.outputPath = outputPath;\n    }\n\n    return true;\n  },\n\n  normalizeLocale(locale) {\n    if (!locale) { return; }\n\n    const localeSegments = locale.replace('-', '_').split('_');\n    let newLocale = [];\n    newLocale.push(localeSegments[0].toLowerCase());\n\n    // two segment locale\n    if (localeSegments[1]) {\n      newLocale.push(localeSegments[1].toUpperCase());\n    }\n\n    return newLocale.join('_');\n  },\n\n  downloadTranslation(locale) {\n    const normalizedLocale = this.normalizeLocale(locale);\n\n    if (!normalizedLocale) { throw new Error('No locale passed to download function'); }\n\n    // if output folder doesn't exist we create it\n    if (!fs.existsSync(this.outputPath)) {\n      fs.mkdirSync(this.outputPath);\n    }\n\n    const fileName = `${normalizedLocale}.${this.format}`;\n    const filePath = path.join(process.cwd(), `${this.outputPath}/${fileName}`);\n    const url = `${this.apiHost}/api/v1/project/${this.project}/${locale}/${this.format}?apiToken=${this.token}&root=${this.root}`;\n\n    let bufferFile;\n\n    // if file exist we grab it's size\n    if (fs.existsSync(filePath)) {\n      bufferFile = fs.readFileSync(filePath);\n    }\n\n    // we start stream\n    const file = fs.createWriteStream(filePath);\n\n    return new Promise((resolve, reject) => {\n      http.get(url, response => {\n        const { statusCode } = response;\n\n        if (statusCode !== 200) {\n          return reject(`Request Failed.\\nStatus Code: ${statusCode}`);\n        }\n\n        response.pipe(file);\n        file.on('finish', () => {\n          const newBufferFile = fs.readFileSync(filePath);\n\n          if (bufferFile && bufferFile.equals(newBufferFile)) {\n            log('yellow', `Generating \"${locale}\" translation. Skipped.`);\n          } else {\n            log('green', `Generating \"${locale}\" translation. Done.`);\n          }\n          resolve();\n        });\n      }).on('error', e => {\n        log('red', e);\n      });\n    });\n  }\n};\n"]}